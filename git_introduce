#以下是git的教程
git add 
git commit -m "-m后面跟着变更说明"

git status   查看修改了但是没有commit的文件
git diff 查看了没有commit的部分与之前文件的不同之处

git log  查看从近到远的历史修改日志 
参数 --pretty=oneline
git log --graph --pretty=oneline --abbrev-commit

git reset --hard HEAD^       回滚到上一版本 
git reset --hard 2f40632fb1942badd6a31a976  也可以

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本 

git diff HEAD -- readme.txt 可以查看工作区和最新版本的区别

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
--很重要，没有--，就变成了“切换到另一个分支”的命令，

git reset HEAD file
把暂存区的文件清除


连接远程仓库：
git remote add origin git@github.com:zhengjieupc/learngit.git

git push -u origin master
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令


git clone git@github.com:michaelliao/gitskills.git


git checkout -b dev 创建并切换到dev分支
git branch dev 创建dev分支
git checkout dev   切换到dev分支

git branch 查看分支



合并分支
git merge dev 将dev分支合并到目前的分支


git branch -d dev 删除分支



git branch -d dev 删除分支


解决冲突
主要还是在出现冲突的时候手动修改文件然后add commit 来解决冲突  然后出现的log是commit (merge)


分支冲突管理策略
合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
git merge --no-ff -m 'merge 并commit with No fast forward' dev

bug分支处理（属于紧急分支处理,一般建立在master）
Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。
首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：
git stash list   查看stash的临时文件
git stash pop   恢复并删除
git stash apply  恢复但是不删除
git stash apply stash@{0}
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。


future分支
添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。


如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。



git remote -v  查看远程库详细信息 


master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。



git checkout -b dev origin/dev  远程只能clone master库，然后自己建立dev分支，继续dev分支的开发 


你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：
解决办法：  先git pull 到本地 origin/dev
            然后merge 解决冲突 然后 在push上去

